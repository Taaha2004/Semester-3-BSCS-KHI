INCLUDE Irvine32.inc
.data
    a dword 52          ; First number
    b dword 32         ; Second number
    gcd_result dword ?  ; Variable to store the GCD result
    lcm_result dword ?
.code
main PROC
    mov eax, a          ; Load a into eax (initial dividend)
    mov ecx, b          ; Load b into ecx (initial divisor)

gcd_loop:
    cmp ecx, 0          ; Check if divisor (ecx) is 0
    je done             ; If zero, GCD is in eax, exit loop

    xor edx, edx        ; Clear edx before division
    div ecx             ; Divide eax by ecx, remainder in edx
    mov eax, ecx        ; Move current divisor to eax
    mov ecx, edx        ; Move remainder to ecx (next divisor)
    jmp gcd_loop        ; Repeat the loop

done:
    mov gcd_result, eax ; Store GCD result in gcd_result
    mov eax, gcd_result ; Move result into eax for display
    call WriteInt       ; Display the GCD
    call Crlf           ; Print a new line

lcm:
   mov eax,a 
   mov ecx,gcd_result 
   div ecx ; eax/ecx 
   mul b ; eax= eax*b
   mov lcm_result, eax
   call writeint
    exit
main ENDP
END main
