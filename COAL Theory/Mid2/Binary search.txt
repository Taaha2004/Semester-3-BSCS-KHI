INCLUDE Irvine32.inc

.data
    ar BYTE 1, 2, 3, 4, 5, 6, 9   ; Sorted array
    searchValue byte 4            ; Value to search for in the array
    mid DWORD 0                   ; Mid index
    foundIndex BYTE ?             ; To store the result (-1 if not found)

.code
main PROC
    mov ah, 0                     ; Low index (ah = 0)
    mov al, (SIZEOF ar) - 1        ; High index (al = array size - 1)
    mov foundIndex, -1            ; Initialize foundIndex to -1 (not found)

Binary_search:
    cmp ah, al                    ; Check if low <= high
    jg do_exit                    ; If low > high, exit the loop (not found)
    
    ; Calculate mid index
    mov bh, ah                    ; bh = low
    add bh, al                    ; bh = low + high
    shr bh, 1                     ; bh = (low + high) / 2
    mov mid, ebx                  ; Store mid in mid (zero-extend bh into ebx)
    
    ; Compare the middle element with searchValue
    movzx esi, bh                 ; Move bh (mid) to esi (zero-extend)
    mov ch,searchValue

    cmp ch,ar [esi]   ; Compare searchValue with ar[mid]

    je if_equal                   ; If equal, jump to if_equal
    
    ; If searchValue < ar[mid], search in the left half
    jl if_low
    
    ; Otherwise, search in the right half
if_high:
    mov al, bh                    ; Set high = mid - 1
    dec al                        ; Decrement high
    jmp Binary_search             ; Repeat the loop

if_low:
    mov ah, bh                    ; Set low = mid + 1
    inc ah                        ; Increment low
    jmp Binary_search             ; Repeat the loop

if_equal:
    mov foundIndex, bh            ; Store mid in foundIndex
    jmp do_exit                   ; Exit the loop

do_exit:
    ; Check if foundIndex is -1 (not found)
    cmp foundIndex, -1
    je not_found                  ; If not found, print -1
    
    ; Print the index if found
    movzx eax, foundIndex         ; Move foundIndex to eax
    call WriteDec                 ; Print the index
    jmp end_prog                  ; End program

not_found:
    mov eax, -1                   ; Print -1 (not found)
    call WriteDec                 ; Output -1

end_prog:
    call Crlf                     ; Print a new line
    exit
main ENDP

END main
