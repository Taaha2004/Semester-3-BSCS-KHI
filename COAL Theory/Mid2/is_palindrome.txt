TITLE Palindrome Check (Palindrome.asm)
INCLUDE Irvine32.inc

.data
inputString BYTE "madam",0       ; Change this string to test different cases
stringLength = ($ - inputString) - 1
isPalindrome BYTE "The string is a palindrome.", 0
notPalindrome BYTE "The string is not a palindrome.", 0

.code
main PROC
    mov ecx, stringLength        ; Set the counter to the length of the string
    mov esi, 0                   ; Index for accessing inputString characters

    ; Push each character onto the stack
pushLoop:
    movzx eax, inputString[esi]  ; Load the character from inputString at index esi
    push eax                     ; Push the character onto the stack
    inc esi                      ; Move to the next character
    loop pushLoop                ; Repeat until ecx reaches 0

    ; Check if the string is a palindrome by comparing characters
    mov ecx, stringLength        ; Reset the counter to the string length
    mov esi, 0                   ; Reset index for inputString
    mov ebx, 1                   ; Flag to indicate if it's a palindrome (1 = true, 0 = false)

checkLoop:
    pop eax                      ; Pop a character from the stack
    cmp al, inputString[esi]     ; Compare it to the character at inputString[esi]
    jne not_palindrome           ; If they don't match, jump to not_palindrome
    inc esi                      ; Move to the next character in inputString
    loop checkLoop               ; Repeat until all characters are checked

    ; If all characters matched, display "The string is a palindrome."
    mov edx, OFFSET isPalindrome
    jmp display_result           ; Jump to display_result

not_palindrome:
    ; If characters didn't match, display "The string is not a palindrome."
    mov edx, OFFSET notPalindrome

display_result:
    call WriteString             ; Display the result
    call Crlf                    ; New line
    exit

main ENDP
END main
